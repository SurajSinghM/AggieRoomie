"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/google-places";
exports.ids = ["pages/api/google-places"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgoogle-places&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgoogle-places.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgoogle-places&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgoogle-places.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_google_places_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\google-places.js */ \"(api)/./pages/api/google-places.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_google_places_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_google_places_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/google-places\",\n        pathname: \"/api/google-places\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_google_places_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmdvb2dsZS1wbGFjZXMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q2dvb2dsZS1wbGFjZXMuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDMkQ7QUFDM0Q7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZ2dpZXJvb21pZS8/YjFkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGdvb2dsZS1wbGFjZXMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nb29nbGUtcGxhY2VzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ29vZ2xlLXBsYWNlc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgoogle-places&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgoogle-places.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/google-places.js":
/*!************************************!*\
  !*** ./pages/api/google-places.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apartmentsHandler: () => (/* binding */ apartmentsHandler),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    // If placeId is provided, fetch details for a specific place\n    if (req.query.placeId) {\n        const placeId = req.query.placeId;\n        if (false) {}\n        try {\n            const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,geometry,formatted_phone_number,website,opening_hours,plus_code,types,photos&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`;\n            const detailsResponse = await fetch(detailsUrl);\n            const detailsData = await detailsResponse.json();\n            if (!detailsData.result) {\n                return res.status(404).json({\n                    message: \"Place details not found\"\n                });\n            }\n            res.status(200).json(detailsData.result);\n            return;\n        } catch (error) {\n            res.status(500).json({\n                message: \"Failed to fetch place details\",\n                error: error.message\n            });\n            return;\n        }\n    }\n    const { dormName } = req.query;\n    if (!dormName) {\n        return res.status(400).json({\n            message: \"Dorm name is required\"\n        });\n    }\n    if (false) {}\n    try {\n        console.log(\"Fetching reviews for:\", dormName);\n        // Search for the dorm\n        const searchQueries = [\n            `${dormName} Texas A&M University`,\n            `${dormName} dorm Texas A&M`,\n            `${dormName} College Station TX`\n        ];\n        let placeId = null;\n        let placeName = \"\";\n        for (const query of searchQueries){\n            const searchUrl = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(query)}&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`;\n            const searchResponse = await fetch(searchUrl);\n            const searchData = await searchResponse.json();\n            if (searchData.results && searchData.results.length > 0) {\n                const result = searchData.results[0];\n                // Check if this is a relevant result (university, lodging, etc.)\n                const relevantTypes = [\n                    \"university\",\n                    \"lodging\",\n                    \"establishment\",\n                    \"point_of_interest\"\n                ];\n                const isRelevant = result.types.some((type)=>relevantTypes.includes(type));\n                if (isRelevant) {\n                    placeId = result.place_id;\n                    placeName = result.name;\n                    console.log(\"Found place:\", placeName, \"with ID:\", placeId);\n                    break;\n                }\n            }\n        }\n        if (!placeId) {\n            console.log(\"No place found for:\", dormName);\n            return res.status(404).json({\n                message: \"No relevant place found\"\n            });\n        }\n        // Get detailed information including reviews\n        const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,rating,reviews,user_ratings_total&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`;\n        const detailsResponse = await fetch(detailsUrl);\n        const detailsData = await detailsResponse.json();\n        if (!detailsData.result) {\n            console.log(\"No details found for place ID:\", placeId);\n            return res.status(404).json({\n                message: \"Place details not found\"\n            });\n        }\n        const place = detailsData.result;\n        const reviewData = {\n            name: place.name,\n            rating: place.rating || 0,\n            reviews: place.user_ratings_total || 0,\n            recentReviews: []\n        };\n        // Extract recent reviews if available\n        if (place.reviews && place.reviews.length > 0) {\n            reviewData.recentReviews = place.reviews.slice(0, 3).map((review)=>({\n                    author: review.author_name,\n                    rating: review.rating,\n                    text: review.text.substring(0, 200) + (review.text.length > 200 ? \"...\" : \"\")\n                }));\n        }\n        console.log(\"Returning review data:\", reviewData);\n        res.status(200).json(reviewData);\n    } catch (error) {\n        console.error(\"Error in Google Places API:\", error);\n        res.status(500).json({\n            message: \"Failed to fetch place data\"\n        });\n    }\n}\n// New handler for apartment search\nasync function apartmentsHandler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    const { near, radius } = req.query;\n    const searchLocation = near || \"Texas A&M University, College Station, TX\";\n    const searchRadius = radius || 3000; // in meters\n    if (false) {}\n    try {\n        // Get coordinates for the search location (campus)\n        const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(searchLocation)}&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`;\n        const geocodeResponse = await fetch(geocodeUrl);\n        const geocodeData = await geocodeResponse.json();\n        if (!geocodeData.results || geocodeData.results.length === 0) {\n            return res.status(404).json({\n                message: \"Location not found\"\n            });\n        }\n        const { lat, lng } = geocodeData.results[0].geometry.location;\n        // Run multiple textsearch queries for broader apartment coverage\n        const searchKeywords = [\n            \"apartments\",\n            \"student apartments\",\n            \"student housing\",\n            \"condos\",\n            \"lofts\",\n            \"residence\",\n            \"college apartments\",\n            \"university apartments\",\n            \"housing\",\n            \"Aspire\",\n            \"City Heights at College Station\"\n        ];\n        let allPlaces = [];\n        for (const keyword of searchKeywords){\n            const url = `https://maps.googleapis.com/maps/api/place/textsearch/json?query=${encodeURIComponent(keyword + \" near \" + searchLocation)}&location=${lat},${lng}&radius=${searchRadius}&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`;\n            const resp = await fetch(url);\n            const data = await resp.json();\n            if (data.results && data.results.length > 0) {\n                allPlaces = allPlaces.concat(data.results);\n            }\n        }\n        // Deduplicate by place_id\n        const seen = new Set();\n        let places = allPlaces.filter((place)=>{\n            if (seen.has(place.place_id)) return false;\n            seen.add(place.place_id);\n            return true;\n        });\n        // Limit to 20 places for Distance Matrix API\n        places = places.slice(0, 20);\n        if (places.length === 0) {\n            return res.status(404).json({\n                message: \"No apartments found\"\n            });\n        }\n        // Prepare destinations for Distance Matrix\n        const destinations = places.map((place)=>`${place.geometry.location.lat},${place.geometry.location.lng}`).join(\"|\");\n        const origin = `${lat},${lng}`;\n        // Get distances for drive, bike, walk\n        let driveRes, bikeRes, walkRes;\n        try {\n            [driveRes, bikeRes, walkRes] = await Promise.all([\n                fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?origins=${origin}&destinations=${destinations}&mode=driving&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`),\n                fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?origins=${origin}&destinations=${destinations}&mode=bicycling&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`),\n                fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?origins=${origin}&destinations=${destinations}&mode=walking&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}`)\n            ]);\n        } catch (err) {\n            return res.status(500).json({\n                message: \"Failed to fetch distance data from Google API\",\n                error: err.message\n            });\n        }\n        let driveData, bikeData, walkData;\n        try {\n            [driveData, bikeData, walkData] = await Promise.all([\n                driveRes.json(),\n                bikeRes.json(),\n                walkRes.json()\n            ]);\n        } catch (err) {\n            return res.status(500).json({\n                message: \"Failed to parse distance data from Google API\",\n                error: err.message\n            });\n        }\n        // Apartment filtering logic\n        const apartmentTypes = [\n            \"apartment\",\n            \"real_estate_agency\",\n            \"premise\",\n            \"point_of_interest\",\n            \"establishment\"\n        ];\n        const excludedTypes = [\n            \"lodging\",\n            \"hotel\",\n            \"motel\",\n            \"inn\",\n            \"hostel\",\n            \"guest_house\",\n            \"bed_and_breakfast\"\n        ];\n        const apartmentKeywords = [\n            \"apartment\",\n            \"apartments\",\n            \"student\",\n            \"housing\",\n            \"lofts\",\n            \"condo\",\n            \"residence\",\n            \"college\",\n            \"university\",\n            \"heights\",\n            \"aspire\",\n            \"city heights\"\n        ];\n        const apartments = places.filter((place)=>{\n            // Exclude hotels, motels, inns, and similar lodging\n            if (place.types.some((type)=>excludedTypes.includes(type))) return false;\n            // Must have an apartment-related type or keyword in the name\n            const nameLower = place.name.toLowerCase();\n            const hasType = place.types.some((type)=>apartmentTypes.includes(type));\n            const hasKeyword = apartmentKeywords.some((kw)=>nameLower.includes(kw));\n            return hasType || hasKeyword;\n        }).map((place, i)=>({\n                name: place.name,\n                address: place.formatted_address || place.vicinity,\n                rating: place.rating || null,\n                userRatingsTotal: place.user_ratings_total || null,\n                placeId: place.place_id,\n                location: place.geometry.location,\n                icon: place.icon,\n                types: place.types,\n                photoUrl: place.photos && place.photos.length > 0 ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${\"AIzaSyAE8kJJUCAGmP_18EnSIeba24ugBzghrlk\"}` : null,\n                distance: {\n                    drive: driveData.rows[0].elements[i].status === \"OK\" ? driveData.rows[0].elements[i] : null,\n                    bike: bikeData.rows[0].elements[i].status === \"OK\" ? bikeData.rows[0].elements[i] : null,\n                    walk: walkData.rows[0].elements[i].status === \"OK\" ? walkData.rows[0].elements[i] : null\n                }\n            }));\n        res.status(200).json({\n            apartments\n        });\n    } catch (error) {\n        res.status(500).json({\n            message: \"Failed to fetch apartments\",\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/google-places.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgoogle-places&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgoogle-places.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();